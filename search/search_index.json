{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome \u00b6 This is the documentation for using Helm to deploy the Ping Identity Docker Images. This single chart can be used to deploy any of the available Ping Identity products in a Kubernetes environment. Prerequisites \u00b6 Kubernetes 1.16+ Helm 3 Ping Identity DevOps User/Key Adding the Helm Repo \u00b6 helm repo add pingidentity https://helm.pingidentity.com/ Removing the Repo \u00b6 helm repo rm pingidentity","title":"Welcome"},{"location":"#welcome","text":"This is the documentation for using Helm to deploy the Ping Identity Docker Images. This single chart can be used to deploy any of the available Ping Identity products in a Kubernetes environment.","title":"Welcome"},{"location":"#prerequisites","text":"Kubernetes 1.16+ Helm 3 Ping Identity DevOps User/Key","title":"Prerequisites"},{"location":"#adding-the-helm-repo","text":"helm repo add pingidentity https://helm.pingidentity.com/","title":"Adding the Helm Repo"},{"location":"#removing-the-repo","text":"helm repo rm pingidentity","title":"Removing the Repo"},{"location":"getting-started/","text":"Getting Started \u00b6 Helm is a package deployment tool for Kubernetes. It can be used with PingDevops to deploy all the components of the Solution with a simple command. Pre-Requisites \u00b6 Kubernetes Cluster Helm 3 Ping Identity DevOps User/Key Create Ping DevOps Secret \u00b6 The charts use a secret called devops-secret to obtain an evaluation license for running images. Eval License - Use your PING_IDENTITY_DEVOPS_USER/PING_IDENTITY_DEVOPS_KEY credentials along with your PING_IDENTITY_ACCEPT_EULA setting. For more information on obtaining credentials click here . For more infomration on using ping-devops utility click here . ```shell ping-devops generate devops-secret | kubectl apply -f - ``` Install Helm 3 \u00b6 Ensure that you have Helm 3 installed. Installing on MacOS (or linux with brew) brew install helm Installing on other OS - https://helm.sh/docs/intro/install/ Add Helm Ping DevOps Repo \u00b6 helm repo add pingidentity https://helm.pingidentity.com/ List Ping DevOps Charts \u00b6 helm search repo pingidentity Update local machine with latest charts \u00b6 helm repo update Install the Ping DevOps Chart \u00b6 Install the ping-devops chart using the example below. In this case, it is installing a release called pf : PingFederate Admin instance PingFederate Engine instance helm install pf pingidentity/ping-devops \\ --set pingfederate-admin.enabled = true \\ --set pingfederate-engine.enabled = true or, if you have a ping-devops-values.yaml : # ping-devops-values.yaml pingfederate-admin : enabled : true pingfederate-engine : enabled : true helm install pf pingidentity/ping-devops \\ -f ping-devops-values.yaml Accessing Deployments \u00b6 Components of the release will be prefixed with pf . Use kubectl to see the pods created. View kubernetes resources installed: # get just pods kubectl get pods --selector = app.kubernetes.io/instance = pf # or get even more kubectl get all --selector = app.kubernetes.io/instance = pf View Logs (from deployment): kubectl logs deployment/pf-pingfederate-admin Uninstalling Release \u00b6 To uninstall a release from helm, use the following helm uninstall command: helm uninstall pf","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"Helm is a package deployment tool for Kubernetes. It can be used with PingDevops to deploy all the components of the Solution with a simple command.","title":"Getting Started"},{"location":"getting-started/#pre-requisites","text":"Kubernetes Cluster Helm 3 Ping Identity DevOps User/Key","title":"Pre-Requisites"},{"location":"getting-started/#create-ping-devops-secret","text":"The charts use a secret called devops-secret to obtain an evaluation license for running images. Eval License - Use your PING_IDENTITY_DEVOPS_USER/PING_IDENTITY_DEVOPS_KEY credentials along with your PING_IDENTITY_ACCEPT_EULA setting. For more information on obtaining credentials click here . For more infomration on using ping-devops utility click here . ```shell ping-devops generate devops-secret | kubectl apply -f - ```","title":"Create Ping DevOps Secret"},{"location":"getting-started/#install-helm-3","text":"Ensure that you have Helm 3 installed. Installing on MacOS (or linux with brew) brew install helm Installing on other OS - https://helm.sh/docs/intro/install/","title":"Install Helm 3"},{"location":"getting-started/#add-helm-ping-devops-repo","text":"helm repo add pingidentity https://helm.pingidentity.com/","title":"Add Helm Ping DevOps Repo"},{"location":"getting-started/#list-ping-devops-charts","text":"helm search repo pingidentity","title":"List Ping DevOps Charts"},{"location":"getting-started/#update-local-machine-with-latest-charts","text":"helm repo update","title":"Update local machine with latest charts"},{"location":"getting-started/#install-the-ping-devops-chart","text":"Install the ping-devops chart using the example below. In this case, it is installing a release called pf : PingFederate Admin instance PingFederate Engine instance helm install pf pingidentity/ping-devops \\ --set pingfederate-admin.enabled = true \\ --set pingfederate-engine.enabled = true or, if you have a ping-devops-values.yaml : # ping-devops-values.yaml pingfederate-admin : enabled : true pingfederate-engine : enabled : true helm install pf pingidentity/ping-devops \\ -f ping-devops-values.yaml","title":"Install the Ping DevOps Chart"},{"location":"getting-started/#accessing-deployments","text":"Components of the release will be prefixed with pf . Use kubectl to see the pods created. View kubernetes resources installed: # get just pods kubectl get pods --selector = app.kubernetes.io/instance = pf # or get even more kubectl get all --selector = app.kubernetes.io/instance = pf View Logs (from deployment): kubectl logs deployment/pf-pingfederate-admin","title":"Accessing Deployments"},{"location":"getting-started/#uninstalling-release","text":"To uninstall a release from helm, use the following helm uninstall command: helm uninstall pf","title":"Uninstalling Release"},{"location":"release-notes/","text":"Release 0.3.1 \u00b6 Add container envFrom for {release-name}-env-vars back as optional. Fixes breaking change from 0.2.8 to 0.2.9 for those that used this configmap. Added ability for deployer to add their own envFrom's via their values.yaml. An example (adding an optional configmap/secrets to all products). Just change global to the name of the product to only have that product use the references. global : container : envFrom : - configMapRef : name : my-killer-configmap optional : true - secretRef : name : my-killer-secrets optional : true Release 0.3.0 \u00b6 Consolidate deployment/stateful set templates to a single workload template. Changes to values.yaml Created a workload map under global (see below) Moved old deployment information under workload Moved old statefulSet information under workload Updated pingfederate-admin to reflect new workload Updated pingdirectory to reflect new workload Allows for any product to be run as a deployment or statefulSet Warning Using workload.type=StatefulSet will create pvc resources and allow for persistence on restarts of containers. This is helpful during development. Be aware that the pvc resources will need to be deleted to startup a fresh copy of the product images. global : workload : type : Deployment # Can be Deployment or StatefulSet (see warning above) deployment : strategy : type : RollingUpdate # Can be RollingUpdate or Recreate rollingUpdate : maxSurge : 1 maxUnavailable : 0 statefulSet : partition : 0 # Used for canary testing if n>0 persistentvolume : enabled : true ############################################################ # For every volume defined in the volumes list, 3 items will be # created in the StatefulSet # 1. container.volumeMounts - name and mountPath # 2. template.spec.volume - name and persistentVolumeClaim.claimName # 3. spec.volumeClaimTemplates - persistentVolumeClaim # # https://kubernetes.io/docs/concepts/storage/persistent-volumes/ ############################################################ volumes : out-dir : mountPath : /opt/out persistentVolumeClaim : accessModes : - ReadWriteOnce storageClassName : resources : requests : storage : 4Gi Renamed template files in pinglib from .yaml to .tpl Added terminationGracePeriodSeconds to container to support setting in values Added serviceAccountName to vault.hashicorp to specify to the continer what service account can be used to authenticate to the Hashicorp Vault Injector","title":"Release Notes"},{"location":"release-notes/#release-031","text":"Add container envFrom for {release-name}-env-vars back as optional. Fixes breaking change from 0.2.8 to 0.2.9 for those that used this configmap. Added ability for deployer to add their own envFrom's via their values.yaml. An example (adding an optional configmap/secrets to all products). Just change global to the name of the product to only have that product use the references. global : container : envFrom : - configMapRef : name : my-killer-configmap optional : true - secretRef : name : my-killer-secrets optional : true","title":"Release 0.3.1"},{"location":"release-notes/#release-030","text":"Consolidate deployment/stateful set templates to a single workload template. Changes to values.yaml Created a workload map under global (see below) Moved old deployment information under workload Moved old statefulSet information under workload Updated pingfederate-admin to reflect new workload Updated pingdirectory to reflect new workload Allows for any product to be run as a deployment or statefulSet Warning Using workload.type=StatefulSet will create pvc resources and allow for persistence on restarts of containers. This is helpful during development. Be aware that the pvc resources will need to be deleted to startup a fresh copy of the product images. global : workload : type : Deployment # Can be Deployment or StatefulSet (see warning above) deployment : strategy : type : RollingUpdate # Can be RollingUpdate or Recreate rollingUpdate : maxSurge : 1 maxUnavailable : 0 statefulSet : partition : 0 # Used for canary testing if n>0 persistentvolume : enabled : true ############################################################ # For every volume defined in the volumes list, 3 items will be # created in the StatefulSet # 1. container.volumeMounts - name and mountPath # 2. template.spec.volume - name and persistentVolumeClaim.claimName # 3. spec.volumeClaimTemplates - persistentVolumeClaim # # https://kubernetes.io/docs/concepts/storage/persistent-volumes/ ############################################################ volumes : out-dir : mountPath : /opt/out persistentVolumeClaim : accessModes : - ReadWriteOnce storageClassName : resources : requests : storage : 4Gi Renamed template files in pinglib from .yaml to .tpl Added terminationGracePeriodSeconds to container to support setting in values Added serviceAccountName to vault.hashicorp to specify to the continer what service account can be used to authenticate to the Hashicorp Vault Injector","title":"Release 0.3.0"},{"location":"config/","text":"Introduction \u00b6 The charts make heavy use of Values yaml files to pass configuration details to the Helm Charts. As defined by Helm Values Files , values are provided the chart using the following mechanisms: values.yaml file in the chart Value files passed to Helm during install/upgrade with the -f flag Individual parameters pass with the --set flag The list above is in order of specificity: values.yaml in the chart can be overridden with -f supplied files, which can in turn be overridden with the --set parameter. The example below shows how values from the chart, user supplied myconfig.yaml and --set parameters are merged with each other to form a merged values. Chart Values \u00b6 To see the values supplied by the chart, simply use the helm show values command to print them. This provides both the data as well as context sensitive comments to each secion. helm show values pingidentity/ping-devops ############################################################ # Ping Identity DevOps values.yaml ############################################################ # ... You can also see all the available values via this values.yaml link The default values are broken up into 2 major sections: global - Represents the base set of values that will be provided to each product section unless it's overridden in that section. product - For every image/product, the values will merged with the global seetings, and take precedenc. Warning Values can only be modified when merged. They cannot be deleted. Also, if a values is set to the boolean true, and merged with a boolean of false, it will always be true. global Section \u00b6 The global: section of the values contains configurations that's available to each products section. If a value is set in globals, that will be available to every prorduct. This is very powerful, as you can turn on the ingress for every product by simply setting: global : ingress : enabled : true This would in essence set ingress.enabled=true for every product: pingaccess : ingress : enabled : true pingdirectory : ingress : enable : true and so on. Much easier to set something in global: section, rather an repeat it for each product. Now, if you only wanted to enable the ingress for a couple of products, then you could leave the default of global.ingress.enabled=false and just set that value for those product sections. product Sections \u00b6 Just like the global: values, each product can have the same values as well as many more that are specific to that product/image. Take the following example in pingdirectory where persistent volume information can be provided: pingdirectory : persistentvolume : enabled : true volumes : - name : out-dir mountPath : /opt/out storage : 8Gi storageClassName :","title":"Introduction"},{"location":"config/#introduction","text":"The charts make heavy use of Values yaml files to pass configuration details to the Helm Charts. As defined by Helm Values Files , values are provided the chart using the following mechanisms: values.yaml file in the chart Value files passed to Helm during install/upgrade with the -f flag Individual parameters pass with the --set flag The list above is in order of specificity: values.yaml in the chart can be overridden with -f supplied files, which can in turn be overridden with the --set parameter. The example below shows how values from the chart, user supplied myconfig.yaml and --set parameters are merged with each other to form a merged values.","title":"Introduction"},{"location":"config/#chart-values","text":"To see the values supplied by the chart, simply use the helm show values command to print them. This provides both the data as well as context sensitive comments to each secion. helm show values pingidentity/ping-devops ############################################################ # Ping Identity DevOps values.yaml ############################################################ # ... You can also see all the available values via this values.yaml link The default values are broken up into 2 major sections: global - Represents the base set of values that will be provided to each product section unless it's overridden in that section. product - For every image/product, the values will merged with the global seetings, and take precedenc. Warning Values can only be modified when merged. They cannot be deleted. Also, if a values is set to the boolean true, and merged with a boolean of false, it will always be true.","title":"Chart Values"},{"location":"config/#global-section","text":"The global: section of the values contains configurations that's available to each products section. If a value is set in globals, that will be available to every prorduct. This is very powerful, as you can turn on the ingress for every product by simply setting: global : ingress : enabled : true This would in essence set ingress.enabled=true for every product: pingaccess : ingress : enabled : true pingdirectory : ingress : enable : true and so on. Much easier to set something in global: section, rather an repeat it for each product. Now, if you only wanted to enable the ingress for a couple of products, then you could leave the default of global.ingress.enabled=false and just set that value for those product sections.","title":"global Section"},{"location":"config/#product-sections","text":"Just like the global: values, each product can have the same values as well as many more that are specific to that product/image. Take the following example in pingdirectory where persistent volume information can be provided: pingdirectory : persistentvolume : enabled : true volumes : - name : out-dir mountPath : /opt/out storage : 8Gi storageClassName :","title":"product Sections"},{"location":"config/container/","text":"Container Configuration \u00b6 Provides values to define kubernetes container information to workload resources, such as deployments and statefulsets. More information on Kuernetes workload resources can be found here . The example found in the global: section is: container : replicaCount : 1 resources : requests : cpu : 500m memory : 500Mi limits : cpu : 4 memory : 8Gi nodeSelector : {} tolerations : [] terminationGracePeriodSeconds : 30 Translating to applicable kubernetes manifest sections: --- spec : replicas : 1 template : spec : containers : resources : limits : cpu : 4 memory : 8Gi requests : cpu : 500m memory : 500Mi nodeSelector : {} tolerations : [] terminationGracePeriodSeconds : 30","title":"Container Configuration"},{"location":"config/container/#container-configuration","text":"Provides values to define kubernetes container information to workload resources, such as deployments and statefulsets. More information on Kuernetes workload resources can be found here . The example found in the global: section is: container : replicaCount : 1 resources : requests : cpu : 500m memory : 500Mi limits : cpu : 4 memory : 8Gi nodeSelector : {} tolerations : [] terminationGracePeriodSeconds : 30 Translating to applicable kubernetes manifest sections: --- spec : replicas : 1 template : spec : containers : resources : limits : cpu : 4 memory : 8Gi requests : cpu : 500m memory : 500Mi nodeSelector : {} tolerations : [] terminationGracePeriodSeconds : 30","title":"Container Configuration"},{"location":"config/external-image/","text":"External Image Configuration \u00b6 Provides values to define kubernetes external image information for use in deployments & statefulsets. The example found in the global: section is: ############################################################ # External Images # # Provides ability to use external images for various purposes # such as using curl. ############################################################ externalImage : curl : curlimages/curl:latest Translating to kubernetes manifest information: initContainers : - command : image : curlimages/url:latest","title":"External Image"},{"location":"config/external-image/#external-image-configuration","text":"Provides values to define kubernetes external image information for use in deployments & statefulsets. The example found in the global: section is: ############################################################ # External Images # # Provides ability to use external images for various purposes # such as using curl. ############################################################ externalImage : curl : curlimages/curl:latest Translating to kubernetes manifest information: initContainers : - command : image : curlimages/url:latest","title":"External Image Configuration"},{"location":"config/global/","text":"global: values \u00b6 There is a top level global value providing instructions on how to name all kubernetes resources, so a deployer might deploy several releases under the same namespace. addReleaseNameToResource \u00b6 Provides global ability to add the Helm .Release.Name to kubernetes resources. Value Description Example: (Release.Name=acme, resource=pingdirectory) prepend Prepends the Release.Name DEFAULT acme-pingdirectory append Appends the Release.Name pingdirectory-acme none No use of Release.Name pingdirectory","title":"global"},{"location":"config/global/#global-values","text":"There is a top level global value providing instructions on how to name all kubernetes resources, so a deployer might deploy several releases under the same namespace.","title":"global: values"},{"location":"config/global/#addreleasenametoresource","text":"Provides global ability to add the Helm .Release.Name to kubernetes resources. Value Description Example: (Release.Name=acme, resource=pingdirectory) prepend Prepends the Release.Name DEFAULT acme-pingdirectory append Appends the Release.Name pingdirectory-acme none No use of Release.Name pingdirectory","title":"addReleaseNameToResource"},{"location":"config/image/","text":"Image Configuration \u00b6 Provides values to define kubernetes image information to deployments and statefulsets. The example found in the global: section is: image : repository : pingidentity name : # Should be completed in product section tag : 2010 pullPolicy : Always Translating to kubernetes manifest information: image : pingidentity/pingaccess:2010 # Example if image.name=pingaccess imagePullPolicy : Always","title":"Image"},{"location":"config/image/#image-configuration","text":"Provides values to define kubernetes image information to deployments and statefulsets. The example found in the global: section is: image : repository : pingidentity name : # Should be completed in product section tag : 2010 pullPolicy : Always Translating to kubernetes manifest information: image : pingidentity/pingaccess:2010 # Example if image.name=pingaccess imagePullPolicy : Always","title":"Image Configuration"},{"location":"config/ingress/","text":"Ingress Configuration \u00b6 Provides values to define kubernetes ingress information to ingresses. More information on Kuernetes ingress resources can be found here . The example found in the global: section is: ingress : enabled : true addReleaseNameToHost : subdomain defaultDomain : example.com defaultTlsSecret : annotations : nginx.ingress.kubernetes.io/backend-protocol : \"HTTPS\" kubernetes.io/ingress.class : \"nginx-public\" and a product: section (pingfederate-admin as example) is: ingress : hosts : - host : pingfederate-admin._defaultDomain_ paths : - path : / backend : servicePort : 9999 tls : - secretName : _defaultTlsSecret_ hosts : Translating to kubernetes manifest information (when .Release.Name=acme ): kind : Ingress metadata : annotations : kubernetes.io/ingress.class : nginx-public nginx.ingress.kubernetes.io/backend-protocol : HTTPS spec : rules : - host : pingfederate-admin.acme.example.com http : paths : - backend : serviceName : acme-pingfederate-admin servicePort : 9999 path : / tls : - hosts : - pingfederate-admin.acme.example.com secretName : \"\"","title":"Ingress"},{"location":"config/ingress/#ingress-configuration","text":"Provides values to define kubernetes ingress information to ingresses. More information on Kuernetes ingress resources can be found here . The example found in the global: section is: ingress : enabled : true addReleaseNameToHost : subdomain defaultDomain : example.com defaultTlsSecret : annotations : nginx.ingress.kubernetes.io/backend-protocol : \"HTTPS\" kubernetes.io/ingress.class : \"nginx-public\" and a product: section (pingfederate-admin as example) is: ingress : hosts : - host : pingfederate-admin._defaultDomain_ paths : - path : / backend : servicePort : 9999 tls : - secretName : _defaultTlsSecret_ hosts : Translating to kubernetes manifest information (when .Release.Name=acme ): kind : Ingress metadata : annotations : kubernetes.io/ingress.class : nginx-public nginx.ingress.kubernetes.io/backend-protocol : HTTPS spec : rules : - host : pingfederate-admin.acme.example.com http : paths : - backend : serviceName : acme-pingfederate-admin servicePort : 9999 path : / tls : - hosts : - pingfederate-admin.acme.example.com secretName : \"\"","title":"Ingress Configuration"},{"location":"config/license/","text":"License Configuration \u00b6 Provides values to define an envFrom to a secret used for obtaining evaluation licenses for Ping Identity products. Assumes use of the ping-devops command-line tool to create the devops-secret with your Ping Identity DevOps User & Key . ping-devops generate devops-secret | kubectl apply -f - The example found in the global: section is: license : secret : devOps : devops-secret Translating to kubernetes manifest information: envFrom : - secretRef : name : devops-secret optional : true","title":"License"},{"location":"config/license/#license-configuration","text":"Provides values to define an envFrom to a secret used for obtaining evaluation licenses for Ping Identity products. Assumes use of the ping-devops command-line tool to create the devops-secret with your Ping Identity DevOps User & Key . ping-devops generate devops-secret | kubectl apply -f - The example found in the global: section is: license : secret : devOps : devops-secret Translating to kubernetes manifest information: envFrom : - secretRef : name : devops-secret optional : true","title":"License Configuration"},{"location":"config/probes/","text":"Probes Configuration \u00b6 Provides values to define kubernetes probe detail to deployments and statefulsets. More information on Kuernetes probes can be found here . The example found in the global: section is: global : probes : liveness : command : /opt/liveness.sh initialDelaySeconds : 30 periodSeconds : 30 timeoutSeconds : 5 successThreshold : 1 failureThreshold : 4 readiness : command : /opt/liveness.sh initialDelaySeconds : 30 periodSeconds : 30 timeoutSeconds : 5 successThreshold : 1 failureThreshold : 4 Translating to applicable kubernetes manifest sections: readinessProbe : exec : command : - /opt/liveness.sh failureThreshold : 4 initialDelaySeconds : 30 periodSeconds : 30 successThreshold : 1 timeoutSeconds : 1 livenessProbe : exec : command : - /opt/liveness.sh failureThreshold : 4 initialDelaySeconds : 30 periodSeconds : 30 successThreshold : 1 timeoutSeconds : 1","title":"Probes"},{"location":"config/probes/#probes-configuration","text":"Provides values to define kubernetes probe detail to deployments and statefulsets. More information on Kuernetes probes can be found here . The example found in the global: section is: global : probes : liveness : command : /opt/liveness.sh initialDelaySeconds : 30 periodSeconds : 30 timeoutSeconds : 5 successThreshold : 1 failureThreshold : 4 readiness : command : /opt/liveness.sh initialDelaySeconds : 30 periodSeconds : 30 timeoutSeconds : 5 successThreshold : 1 failureThreshold : 4 Translating to applicable kubernetes manifest sections: readinessProbe : exec : command : - /opt/liveness.sh failureThreshold : 4 initialDelaySeconds : 30 periodSeconds : 30 successThreshold : 1 timeoutSeconds : 1 livenessProbe : exec : command : - /opt/liveness.sh failureThreshold : 4 initialDelaySeconds : 30 periodSeconds : 30 successThreshold : 1 timeoutSeconds : 1","title":"Probes Configuration"},{"location":"config/service/","text":"Service Configuration \u00b6 Provides values to define kubernetes service detail. More information on Kuernetes services can be found here . The example found in the product.pingfederate-admin: section is: services : admin : port : 9999 targetPort : 9999 dataService : true clusterbind : port : 7600 targetPort : 7600 clusterService : true clusterfail : port : 7700 targetPort : 7700 clusterService : true clusterExternalDNSHostname : This will create a regular data service (i.e. 9999) and cluster, aka \"headless\" service (i.e. 7600, 7700), depending on the settings of the dataService and clusterService booleans. Translating to applicable kubernetes manifest sections: apiVersion : v1 kind : Service metadata : name : acme-pingfederate-admin spec : ports : - name : admin port : 9999 protocol : TCP targetPort : 9999 selector : app.kubernetes.io/instance : pf app.kubernetes.io/name : pingfederate-admin --- apiVersion : v1 kind : Service metadata : annotations : service.alpha.kubernetes.io/tolerate-unready-endpoints : \"true\" name : acme-pingfederate-admin-cluster spec : clusterIP : None ports : - name : clusterbind port : 7600 protocol : TCP targetPort : 7600 - name : clusterfail port : 7700 protocol : TCP targetPort : 7700 publishNotReadyAddresses : true selector : clusterIdentifier : acme-pingfederate-admin type : ClusterIP","title":"Service"},{"location":"config/service/#service-configuration","text":"Provides values to define kubernetes service detail. More information on Kuernetes services can be found here . The example found in the product.pingfederate-admin: section is: services : admin : port : 9999 targetPort : 9999 dataService : true clusterbind : port : 7600 targetPort : 7600 clusterService : true clusterfail : port : 7700 targetPort : 7700 clusterService : true clusterExternalDNSHostname : This will create a regular data service (i.e. 9999) and cluster, aka \"headless\" service (i.e. 7600, 7700), depending on the settings of the dataService and clusterService booleans. Translating to applicable kubernetes manifest sections: apiVersion : v1 kind : Service metadata : name : acme-pingfederate-admin spec : ports : - name : admin port : 9999 protocol : TCP targetPort : 9999 selector : app.kubernetes.io/instance : pf app.kubernetes.io/name : pingfederate-admin --- apiVersion : v1 kind : Service metadata : annotations : service.alpha.kubernetes.io/tolerate-unready-endpoints : \"true\" name : acme-pingfederate-admin-cluster spec : clusterIP : None ports : - name : clusterbind port : 7600 protocol : TCP targetPort : 7600 - name : clusterfail port : 7700 protocol : TCP targetPort : 7700 publishNotReadyAddresses : true selector : clusterIdentifier : acme-pingfederate-admin type : ClusterIP","title":"Service Configuration"},{"location":"config/vault/","text":"Vault Configuration \u00b6 Provides values to define kubernetes deployments and statefulsets to use a Hashicorp vault to inject secrets as part of an init container. More information on Hashicorp Vault annoations can be found here . The example found in the global: section is: vault : enabled : false hashicorp : role : k8s-default log-level : info preserve-secret-case : true secret-volume-path : /run/secrets pre-populate-only : true serviceAccountName : vault-auth # secretPrefix: path/to/secrets # secrets: # - name: secret-name # secret: secret-name Assuming the comments were uncommented out, secrtes from the Vault at path/to/secrets/secret-name would be placed in the container under /run/secrets Translating to applicable kubernetes manifest sections: annotations : vault.hashicorp.com/agent-inject : \"true\" vault.hashicorp.com/agent-inject-secret-secret-name.json : path/to/secrets/secret-name vault.hashicorp.com/agent-inject-template-secret-name.json : | {{ with secret \"path/to/secrets/secret-name/secret-name\" -}} {{ .Data.data | toJSONPretty }} {{- end }} vault.hashicorp.com/agent-pre-populate-only : \"true\" vault.hashicorp.com/log-level : info vault.hashicorp.com/preserve-secret-case : \"true\" vault.hashicorp.com/role : k8s-default vault.hashicorp.com/secret-volume-path : /run/secrets","title":"Vault"},{"location":"config/vault/#vault-configuration","text":"Provides values to define kubernetes deployments and statefulsets to use a Hashicorp vault to inject secrets as part of an init container. More information on Hashicorp Vault annoations can be found here . The example found in the global: section is: vault : enabled : false hashicorp : role : k8s-default log-level : info preserve-secret-case : true secret-volume-path : /run/secrets pre-populate-only : true serviceAccountName : vault-auth # secretPrefix: path/to/secrets # secrets: # - name: secret-name # secret: secret-name Assuming the comments were uncommented out, secrtes from the Vault at path/to/secrets/secret-name would be placed in the container under /run/secrets Translating to applicable kubernetes manifest sections: annotations : vault.hashicorp.com/agent-inject : \"true\" vault.hashicorp.com/agent-inject-secret-secret-name.json : path/to/secrets/secret-name vault.hashicorp.com/agent-inject-template-secret-name.json : | {{ with secret \"path/to/secrets/secret-name/secret-name\" -}} {{ .Data.data | toJSONPretty }} {{- end }} vault.hashicorp.com/agent-pre-populate-only : \"true\" vault.hashicorp.com/log-level : info vault.hashicorp.com/preserve-secret-case : \"true\" vault.hashicorp.com/role : k8s-default vault.hashicorp.com/secret-volume-path : /run/secrets","title":"Vault Configuration"},{"location":"config/workload/","text":"Workload Configuration \u00b6 Provides values to define kubernetes depoyment information to Deployments or StatefulSets. More information on Kuernetes deployment resources: Deployments StatefulSets The example found in the global: section is: workload : # Can be Deployment or StatefulSet (see warning above) type : Deployment deployment : strategy : # Can be RollingUpdate or Recreate type : RollingUpdate rollingUpdate : maxSurge : 1 maxUnavailable : 0 statefulSet : # Used for canary testing if n>0 partition : 0 ############################################################ # Persistent Volumes # # For every volume defined in the volumes list, 3 items will be # created in the StatefulSet # 1. container.volumeMounts - name and mountPath # 2. template.spec.volume - name and persistentVolumeClaim.claimName # 3. spec.volumeClaimTemplates - persistentVolumeClaim # # https://kubernetes.io/docs/concepts/storage/persistent-volumes/ ############################################################ persistentvolume : enabled : true volumes : out-dir : mountPath : /opt/out persistentVolumeClaim : accessModes : - ReadWriteOnce storageClassName : resources : requests : storage : 4Gi","title":"Workload"},{"location":"config/workload/#workload-configuration","text":"Provides values to define kubernetes depoyment information to Deployments or StatefulSets. More information on Kuernetes deployment resources: Deployments StatefulSets The example found in the global: section is: workload : # Can be Deployment or StatefulSet (see warning above) type : Deployment deployment : strategy : # Can be RollingUpdate or Recreate type : RollingUpdate rollingUpdate : maxSurge : 1 maxUnavailable : 0 statefulSet : # Used for canary testing if n>0 partition : 0 ############################################################ # Persistent Volumes # # For every volume defined in the volumes list, 3 items will be # created in the StatefulSet # 1. container.volumeMounts - name and mountPath # 2. template.spec.volume - name and persistentVolumeClaim.claimName # 3. spec.volumeClaimTemplates - persistentVolumeClaim # # https://kubernetes.io/docs/concepts/storage/persistent-volumes/ ############################################################ persistentvolume : enabled : true volumes : out-dir : mountPath : /opt/out persistentVolumeClaim : accessModes : - ReadWriteOnce storageClassName : resources : requests : storage : 4Gi","title":"Workload Configuration"},{"location":"devops/","text":"Ping Identity Helm Charts \u00b6 This repository provides sample Helm charts for Ping Identity products for community use. These helm charts are intended to be a good starting point and can be used and altered as required. Charts \u00b6 Chart Type Capability Status Scalable DevOps Full Application Includes all PingIdentity Charts Available (Beta) Yes PingFederate Product SSO / Authentication Authority Available (Beta) Yes PingAccess Product Medium/Course grain Authorization Gateway/PEP Available (Beta) No (TBC) PingDirectory Product User/Device/Consent/Organisation Directory Available (Beta) Yes PingDataConsole Product PingData Admin Console Available (Beta) Not required PingDataSync Product Data Synchronisation Engine Not available N/a PingDelegator Product Delegated User Management UI Not available Yes","title":"Ping Identity Helm Charts"},{"location":"devops/#ping-identity-helm-charts","text":"This repository provides sample Helm charts for Ping Identity products for community use. These helm charts are intended to be a good starting point and can be used and altered as required.","title":"Ping Identity Helm Charts"},{"location":"devops/#charts","text":"Chart Type Capability Status Scalable DevOps Full Application Includes all PingIdentity Charts Available (Beta) Yes PingFederate Product SSO / Authentication Authority Available (Beta) Yes PingAccess Product Medium/Course grain Authorization Gateway/PEP Available (Beta) No (TBC) PingDirectory Product User/Device/Consent/Organisation Directory Available (Beta) Yes PingDataConsole Product PingData Admin Console Available (Beta) Not required PingDataSync Product Data Synchronisation Engine Not available N/a PingDelegator Product Delegated User Management UI Not available Yes","title":"Charts"},{"location":"examples/everything/","text":"Everything...and the kitchen sink \u00b6 This example values below deploys all the product/images integrated with one another. Deploy \u00b6 helm upgrade --install everything pingidentity/ping-devops \\ -f https://helm.pingidentity.com/examples/everything.yaml Uninstall \u00b6 helm uninstall everything Everything Config Yaml \u00b6 global : image : tag : \"edge\" # Uses images with the \"edge\" tag pingaccess : enabled : true pingdataconsole : enabled : true pingdatagovernance : enabled : true pingdatasync : enabled : true pingdelegator : enabled : true pingdirectory : enabled : true pingfederate-admin : enabled : true envs : SERVER_PROFILE_URL : https://github.com/pingidentity/pingidentity-server-profiles.git SERVER_PROFILE_PATH : baseline/pingfederate pingfederate-engine : enabled : true envs : SERVER_PROFILE_URL : https://github.com/pingidentity/pingidentity-server-profiles.git SERVER_PROFILE_PATH : baseline/pingfederate ldap-sdk-tools : enabled : false pd-replication-timing : enabled : false","title":"Everything"},{"location":"examples/everything/#everythingand-the-kitchen-sink","text":"This example values below deploys all the product/images integrated with one another.","title":"Everything...and the kitchen sink"},{"location":"examples/everything/#deploy","text":"helm upgrade --install everything pingidentity/ping-devops \\ -f https://helm.pingidentity.com/examples/everything.yaml","title":"Deploy"},{"location":"examples/everything/#uninstall","text":"helm uninstall everything","title":"Uninstall"},{"location":"examples/everything/#everything-config-yaml","text":"global : image : tag : \"edge\" # Uses images with the \"edge\" tag pingaccess : enabled : true pingdataconsole : enabled : true pingdatagovernance : enabled : true pingdatasync : enabled : true pingdelegator : enabled : true pingdirectory : enabled : true pingfederate-admin : enabled : true envs : SERVER_PROFILE_URL : https://github.com/pingidentity/pingidentity-server-profiles.git SERVER_PROFILE_PATH : baseline/pingfederate pingfederate-engine : enabled : true envs : SERVER_PROFILE_URL : https://github.com/pingidentity/pingidentity-server-profiles.git SERVER_PROFILE_PATH : baseline/pingfederate ldap-sdk-tools : enabled : false pd-replication-timing : enabled : false","title":"Everything Config Yaml"},{"location":"examples/pingfederate/","text":"PingFederate...admin and engine \u00b6 This example values below deploys a PingFederate Admin Console and Engine. Deploy \u00b6 helm upgrade --install pf pingidentity/ping-devops \\ -f https://helm.pingidentity.com/examples/pingfederate.yaml Uninstall \u00b6 helm uninstall pf Config Yaml \u00b6 pingfederate.yaml","title":"PingFederate"},{"location":"examples/pingfederate/#pingfederateadmin-and-engine","text":"This example values below deploys a PingFederate Admin Console and Engine.","title":"PingFederate...admin and engine"},{"location":"examples/pingfederate/#deploy","text":"helm upgrade --install pf pingidentity/ping-devops \\ -f https://helm.pingidentity.com/examples/pingfederate.yaml","title":"Deploy"},{"location":"examples/pingfederate/#uninstall","text":"helm uninstall pf","title":"Uninstall"},{"location":"examples/pingfederate/#config-yaml","text":"pingfederate.yaml","title":"Config Yaml"}]}